{"version":3,"file":"static/js/985.bb9e1509.chunk.js","mappings":"kOAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,EAEtBC,EAAoB,SAAAF,GAAK,OAAIA,EAAMG,OAAOC,IAAjB,EAEzBC,EAAgB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,EAErBC,EAAc,SAAAP,GAAK,OAAIA,EAAMC,SAASO,KAAnB,E,6BCJnBC,EAAUC,EAAAA,GAAAA,IAAH,iSAWPC,EAAQD,EAAAA,GAAAA,GAAH,iKASLE,EAAOF,EAAAA,GAAAA,KAAH,sFAMJG,EAAQH,EAAAA,GAAAA,MAAH,6FAMLI,EAAQJ,EAAAA,GAAAA,MAAH,4OAeLK,EAAML,EAAAA,GAAAA,OAAH,ib,UCzCT,SAASM,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXjB,GAAWkB,EAAAA,EAAAA,IAAYpB,GA0B7B,OACE,SAACU,EAAD,WACE,4BACE,SAACE,EAAD,4BACA,UAACC,EAAD,CAAMQ,SA5BS,SAAAC,GACnBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cACbC,EAAOF,EAAKG,SAAL,KAAsBC,MAE7BC,EAASC,OAAON,EAAKG,SAAL,OAAwBC,OAExCG,EAAiBL,EAAKM,eAEV,OAAG9B,QAAH,IAAGA,OAAH,EAAGA,EAAU+B,MAC7B,SAAAC,GAAgB,aACd,UAAAA,EAAiBR,YAAjB,eAAuBM,iBAAkBD,CAD3B,KAKhBI,MAAM,GAAD,OAAIT,EAAJ,yCAIPR,GAASkB,EAAAA,EAAAA,IAAW,CAAEV,KAAAA,EAAMG,OAAAA,KAC5BL,EAAKa,QACN,EAMK,WACE,UAACvB,EAAD,CAAOwB,QAAQ,IAAf,UACG,IADH,OAEO,KACL,SAACvB,EAAD,CACEwB,KAAK,OACLb,KAAK,OACLc,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,GAAG,UAIP,UAAC7B,EAAD,CAAOwB,QAAQ,IAAf,kBACQ,KACN,SAACvB,EAAD,CACEwB,KAAK,MACLb,KAAK,SACLc,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,GAAG,UAIP,SAAC3B,EAAD,CAAKuB,KAAK,SAAV,gCAKT,CCrEM,I,QAAMK,EAASjC,EAAAA,GAAAA,OAAH,6LAUNkC,EAAOlC,EAAAA,GAAAA,GAAH,oECRJmC,EAAc,SAAC,GAA2C,IAAzCH,EAAwC,EAAxCA,GAAIjB,EAAoC,EAApCA,KAAMG,EAA8B,EAA9BA,OAAQkB,EAAsB,EAAtBA,gBAC9C,OACE,UAACF,EAAD,CAAMF,GAAIA,EAAV,UACGjB,EADH,MACYG,GACV,SAACe,EAAD,CAAQI,QAAS,kBAAMD,EAAgBJ,EAAtB,EAAjB,sBAFiBA,EAKtB,ECTYM,EAAOtC,EAAAA,GAAAA,GAAH,iJASJC,EAAQD,EAAAA,GAAAA,GAAH,+GCDLuC,EAAc,WACzB,IAAMhC,GAAWC,EAAAA,EAAAA,MACXjB,GAAWkB,EAAAA,EAAAA,IAAYpB,GAC7BmD,QAAQC,IAAIlD,IAEZmD,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,MACV,GAAE,CAACpC,IAEJ,IAUMqC,EARuB,SAACrD,EAAUE,GACtC,IAAIoD,EAAmBpD,EAAO4B,cAE9B,OAAO9B,EAASE,QAAO,SAAAqD,GAAO,OAC5BA,EAAQ/B,KAAKM,cAAc0B,SAASF,EADR,GAG/B,CAEuBG,CAAqBzD,GAV9BkB,EAAAA,EAAAA,IAAYjB,IAY3B,OACE,UAAC8C,EAAD,YACE,SAAC,EAAD,uBACCM,EAAgBK,OAAS,GACxBL,EAAgBM,KAAI,gBAAGlB,EAAH,EAAGA,GAAIjB,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAb,OAElB,SAACiB,EAAD,CAEEH,GAAIA,EACJjB,KAAMA,EACNG,OAAQA,EACRkB,gBAAiB,kBAAM7B,GAAS4C,EAAAA,EAAAA,IAAcnB,GAA7B,GAJZA,EAHW,MAa3B,E,UC9CYoB,EAAcpD,EAAAA,GAAAA,MAAH,uICMXqD,EAAS,WACpB,IAAM9C,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAAC4C,EAAD,oCAEE,SAAChD,EAAD,CAAOwB,KAAK,OAAO0B,SANG,SAAA3C,GAAK,OAC7BJ,GAASgD,EAAAA,EAAAA,IAAgB5C,EAAMG,cAAcG,OADhB,MAShC,EClBYlB,EAAUC,EAAAA,GAAAA,IAAH,mECOL,SAASwD,IACtB,IAAMjD,GAAWC,EAAAA,EAAAA,MACXZ,GAAYa,EAAAA,EAAAA,IAAYd,GACxBG,GAAQW,EAAAA,EAAAA,IAAYZ,GAM1B,OAJA6C,EAAAA,EAAAA,YAAU,WACRnC,EAASoC,EAAAA,GACV,GAAE,CAACpC,KAGF,UAAC,EAAD,WACGX,IAAcE,IAAS,mDACxB,SAACQ,EAAD,KACA,SAACiC,EAAD,KACA,SAACc,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\n\nexport const selectInputFilter = state => state.filter.text;\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  padding: 40px;\n  width: 500px;\n  display: flex;\n  justify-content: space-evenly;\n  border: 1px solid #ccc;\n  box-shadow: 0px 4px 8px 1px rgba(0, 0, 0, 0.36),\n    0px 1px 1px -1px rgba(0, 0, 0, 0.1), 0px 1px 1px -1px rgba(0, 0, 0, 0.02);\n`;\n\nexport const Title = styled.h2`\n  margin-top: 5px;\n  display: flex;\n  justify-content: center;\n  color: #00000099;\n  font-size: 44px;\n  text-transform: uppercase;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`;\n\nexport const Input = styled.input`\n  border: none;\n  height: 32px;\n  margin-top: 5px;\n  background-color: #0000002c;\n\n  &:hover {\n    border: 1px solid #000000;\n  }\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 1px #000000;\n  }\n`;\n\nexport const Btn = styled.button`\n  text-transform: uppercase;\n  color: #fff;\n  font-weight: 500;\n  background-color: #000000;\n  padding: 7px 9px;\n  border: transparent;\n  cursor: pointer;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: #b40000;\n    box-shadow: 0 0 0 1px #000000;\n    border-radius: 5px;\n  }\n  &:focus {\n    background-color: #b40000;\n    box-shadow: 0 0 0 1px #000000;\n    border-radius: 5px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n// import { Button } from 'components/Button/Button';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/contOperations';\nimport PropTypes from 'prop-types';\n\nimport { Form, Label, Input, Wrapper, Title, Btn } from './ContactForm.styled';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    const name = form.elements['name'].value;\n\n    const number = String(form.elements['number'].value);\n\n    const normalizedName = name.toLowerCase();\n\n    const compareNames = contacts?.find(\n      contactToCompare =>\n        contactToCompare.name?.toLowerCase() === normalizedName\n    );\n\n    if (compareNames) {\n      alert(`${name} is already in the list of contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <Wrapper>\n      <div>\n        <Title>Add Contacts</Title>\n        <Form onSubmit={handleSubmit}>\n          <Label htmlFor=\"1\">\n            {' '}\n            Name{' '}\n            <Input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              id=\"1\"\n            />\n          </Label>\n\n          <Label htmlFor=\"2\">\n            Phone{' '}\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              id=\"2\"\n            />\n          </Label>\n\n          <Btn type=\"submit\">Add contact</Btn>\n        </Form>\n      </div>\n    </Wrapper>\n  );\n}\n\nContactForm.propTypes = {\n  handleSubmit: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  text-transform: uppercase;\n  color: #fff;\n  background-color: #003030;\n  padding: 5px 7px;\n  border: transparent;\n  border-radius: 5px;\n  margin-left: 5px;\n`;\n\nexport const Item = styled.li`\n  font-weight: 500;\n  margin-bottom: 4px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Item, Button } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <Item id={id} key={id}>\n      {name} : {number}\n      <Button onClick={() => onDeleteContact(id)}>Delete</Button>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0 auto;\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  padding: 0;\n`;\n\nexport const Title = styled.h2`\n  font-size: 34px;\n  color: #00000099;\n  display: flex;\n  justify-content: center;\n`;\n\n// export const Item = styled.li``;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contOperations';\nimport { deleteContact } from 'redux/contacts/contOperations';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectInputFilter } from 'redux/contacts/selectors';\nimport { List, Title } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  console.log(contacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filter = useSelector(selectInputFilter);\n\n  const getContactFromFilter = (contacts, filter) => {\n    let normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const visibleContacts = getContactFromFilter(contacts, filter);\n\n  return (\n    <List>\n      <Title>CONTACTS</Title>\n      {visibleContacts.length > 0 &&\n        visibleContacts.map(({ id, name, number }) => (\n          // <Item>\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={() => dispatch(deleteContact(id))}\n          ></ContactItem>\n          // </Item>\n        ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  getContactFromFilter: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const InputFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-weight: 500;\n  margin-top: 30px;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setStatusFilter } from 'redux/filterSlice';\nimport PropTypes from 'prop-types';\nimport { InputFilter } from './Filter.styled';\n\nimport { Input } from 'components/ContactForm/ContactForm.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterCheck = event =>\n    dispatch(setStatusFilter(event.currentTarget.value));\n\n  return (\n    <InputFilter>\n      Find contacts by name\n      <Input type=\"text\" onChange={handleFilterCheck} />\n    </InputFilter>\n  );\n};\n\nFilter.propTypes = {\n  handleFilterCheck: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 20px;\n  margin-left: 40px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/contOperations';\nimport { selectLoading, selectError } from 'redux/contacts/selectors';\nimport { Wrapper } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts);\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactForm />\n      <ContactList />\n      <Filter />\n    </Wrapper>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectInputFilter","filter","text","selectLoading","isLoading","selectError","error","Wrapper","styled","Title","Form","Label","Input","Btn","ContactForm","dispatch","useDispatch","useSelector","onSubmit","event","preventDefault","form","currentTarget","name","elements","value","number","String","normalizedName","toLowerCase","find","contactToCompare","alert","addContact","reset","htmlFor","type","pattern","title","required","id","Button","Item","ContactItem","onDeleteContact","onClick","List","ContactList","console","log","useEffect","fetchContacts","visibleContacts","normalizedFilter","contact","includes","getContactFromFilter","length","map","deleteContact","InputFilter","Filter","onChange","setStatusFilter","Contacts"],"sourceRoot":""}